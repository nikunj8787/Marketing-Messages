import streamlit as st
import pandas as pd
import io
import zipfile
import re

# Constants
EMI_LINK = "https://lnk.ink/FUwEc"
VALUATION_LINK = "https://lnk.ink/fkYwF"

# Column mapping as per your CSV
COLUMN_MAP = {
    "A": "Tag",
    "B": "Property-Address",
    "C": "Location",
    "D": "Property-Price",
    "E": "BHK",
    "F": "Super-Built-up-Construction-Area",
    "G": "Property-On-Floor",
    "H": "Property-Facing",
    "I": "Furniture-Details",
    "J": "Parking-Details",
    "K": "360DGT-Link",
    "L": "Property-Link"
}

def safe_filename(s):
    return re.sub(r'[^A-Za-z0-9_\-]', '_', s)

def clean_location(loc):
    if pd.isna(loc) or loc == "NA":
        return "NA"
    loc = str(loc).strip()
    if '-' in loc:
        return loc.split('-', 1)[1].strip()
    return loc

def get_value(row, code):
    col = COLUMN_MAP.get(code)
    if col and col in row and pd.notna(row[col]) and str(row[col]).strip() != "":
        return str(row[col]).strip()
    return "NA"

def get_360_or_video(row):
    k = get_value(row, 'K')
    l = get_value(row, 'L')
    if k == "NA":
        return l
    return k

def visit_done_to_closing_msgs(row):
    return [
        f"""ЁЯПб ркЪрк╛рк▓рлЛ рклрк░рлАркерлА ркпрк╛ркж ркХрк░рлАркП ркХрлЗ ркХрлЗрко ркдркоркирлЗ ркЖ ркШрк░ рккрк╕ркВркж ркЖрк╡рлНркпрлБркВ рк╣ркдрлБркВ!
ЁЯУП {get_value(row,'E')} | {get_value(row,'F')} | {get_value(row,'I')}
ЁЯУН {get_value(row,'H')} | {get_value(row,'G')} ркорк╛рк│
ЁЯСЙ рк╢рлБркВ ркЖрккркгрлЗ ркдркорк╛рк░рк╛ ркорк╛ркЯрлЗ рк╡рлЗркЪркирк╛рк░ рк╕рк╛ркерлЗ ркорлАркЯрк┐ркВркЧ рклрк┐ркХрлНрк╕ ркХрк░рлАркП?
рк░рк┐рккрлНрк▓рк╛ркп ркХрк░рлЛ YES ркЬрлЛ рк░рк╕ рк╣рлЛркп ркдрлЛ, No ркЬрлЛ рки рк╣рлЛркп ркдрлЛ.""",

        f"""ЁЯУН {get_value(row,'A')} рклркХрлНркд рк▓рлЛркХрлЗрк╢рки ркиркерлА, ркП рк▓рк╛ркЗрклрк╕рлНркЯрк╛ркЗрк▓ ркЫрлЗ.
рк╕рлНркХрлВрк▓, ркХрлЛрк▓рлЗркЬ, рк╣рлЛрк╕рлНрккрк┐ркЯрк▓, рк╢рлЛрккрк┐ркВркЧ ркорлЛрк▓ ркмркзрлБркВ ркиркЬрлАркХркорк╛ркВ ркЫрлЗ.
ЁЯСЙ рк░рк┐рккрлНрк▓рк╛ркп ркХрк░рлЛ YES ркЬрлЛ рк░рк╕ рк╣рлЛркп ркдрлЛ, No ркЬрлЛ рки рк╣рлЛркп ркдрлЛ.""",

        f"""ЁЯОе ркЖ рк╢рлЛрк░рлНркЯ рк╡рк┐ркбрк┐ркпрлЛ ркорк╛ркВ рклрк░рлАркерлА ркШрк░ ркЬрлБркУ!
ркШрк░ркирк╛ рк▓рлЗркЖркЙркЯ ркЕркирлЗ рк▓рк╛ркЗркЯрк┐ркВркЧ рк╕ркоркЬрк╡рлБркВ рк╣рк╡рлЗ рк╕рк░рк│ ркЫрлЗ.
ЁЯСЙ {get_value(row,'L')}
ЁЯСЙ рк░рк┐рккрлНрк▓рк╛ркп ркХрк░рлЛ YES ркЬрлЛ рк░рк╕ рк╣рлЛркп ркдрлЛ, No ркЬрлЛ рки рк╣рлЛркп ркдрлЛ.""",

        f"""ЁЯзн {get_value(row,'A')} ркирлА ркбрк┐ркЬрк┐ркЯрк▓ ркорлБрк▓рк╛ркХрк╛ркд рк▓рлЛ, ркП рккркг ркорлЛркмрк╛ркЗрк▓ рккрк░ркерлА!
ркжрк░рлЗркХ ркЦрлВркгрк╛ркирлБркВ 360┬░ ркЯрлВрк░ ркЬрлБркУ.
ЁЯСЙ {get_value(row,'K')}
ЁЯСЙ рк░рк┐рккрлНрк▓рк╛ркп ркХрк░рлЛ YES ркЬрлЛ рк░рк╕ рк╣рлЛркп ркдрлЛ, No ркЬрлЛ рки рк╣рлЛркп ркдрлЛ.""",

        f"""ЁЯТ░ {get_value(row,'A')} тВ╣{get_value(row,'D')} ркорк╛ркВ ркПркХ ркЙркдрлНркдрко ркУрккрлНрк╢рки ркЫрлЗ!
ркЖ ркЬ рк╕рлЛрк╕рк╛ркпркЯрлАркорк╛ркВ ркЖрк╡рлА ркХрк┐ркВркоркдркирлА ркШркгрлА ркбрлАрк▓рлНрк╕ ркеркЗ ркЪрлВркХрлА ркЫрлЗ.
ЁЯСЙ рк╢рлБркВ ркЕркорлЗ рк╡рлЗркЪркирк╛рк░ рк╕рк╛ркерлЗ ркнрк╛рк╡ рк╡рк╛ркд ркорк╛ркЯрлЗ ркорлАркЯрк┐ркВркЧ рклрк┐ркХрлНрк╕ ркХрк░рлАркП? рк░рк┐рккрлНрк▓рк╛ркп ркХрк░рлЛ YES.""",

        f"""ЁЯдЭ Cleardeals рк╕рк╛ркерлЗ ркдркорк╛рк░рлБркВ ркШрк░ ркЦрк░рлАркжрк╡рлБркВ рк╣рк╡рлЗ рк╡ркзрлБ рк╕рк░рк│ ркЫрлЗ!
тЬЕ 0% ркмрлНрк░рлЛркХрк░рлЗркЬ
тЬЕ ркирлЗркЧрлЛрк╢рк┐ркПрк╢рки рк╕рккрлЛрк░рлНркЯ
тЬЕ рк▓рлЛрки ркЕркирлЗ рк▓рлАркЧрк▓ рк╕рк╣рк╛ркп тАФ ркмркзрлБркВ ркПркХркЬ ркЬркЧрлНркпрк╛ ркП Click here: {EMI_LINK}
ЁЯСЙ рк╢рлБркВ рк╣рк╡рлЗ рк╡рлЗркЪркирк╛рк░ рк╕рк╛ркерлЗ ркорлБрк▓рк╛ркХрк╛ркд рк░рк╛ркЦрлА рклрк╛ркИркирк▓ рк╕рлНркЯрлЗркк рк▓ркИркП? рк░рк┐рккрлНрк▓рк╛ркп ркХрк░рлЛ YES.""",

        f"""ЁЯУК рк╢рлБркВ ркдркорлЗ {get_value(row,'A')} ркирлА рккрлНрк░рлЛрккрк░рлНркЯрлАркирлБркВ рк╡рлЗрк▓рлНркпрлВркПрк╢рки ркЬрк╛ркгрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?
ЁЯСЙ рк╢рк░рлБ ркХрк░рлЛ ркдркорк╛рк░рк╛ рккрлНрк░рлЛрккрк░рлНркЯрлАркирлБркВ ркорлВрк▓рлНркпрк╛ркВркХрки ркЖркЬрлЗ ркЬ. Click here: {VALUATION_LINK}
ЁЯСЙ рк╢рлБркВ рк╣рк╡рлЗ рк╡рлЗркЪркирк╛рк░ рк╕рк╛ркерлЗ ркорлБрк▓рк╛ркХрк╛ркд рк░рк╛ркЦрлА рклрк╛ркИркирк▓ рк╕рлНркЯрлЗркк рк▓ркИркП? рк░рк┐рккрлНрк▓рк╛ркп ркХрк░рлЛ YES.""",

        f"""ЁЯХТ рк╢рлБркВ ркдркорлЗ рк╣ркЬрлБ ркИркирлНркЯрк░рлЗрк╕рлНркЯрлЗркб ркЫрлЛ ркХрлЗ ркирк╣рлАркВ?
ркЬрлЛ рк╣ркЬрлА рк╡рк┐ркЪрк╛рк░ркорк╛ркВ ркЫрлЛ ркдрлЛ ркЕркорлЗ рк▓рлЛркХркЕркк ркмркВркз ркХрк░рлАрк╢рлБркВ тАФ рк╣рк╡рлЗ ркирк┐рк░рлНркгркпркирлЛ рк╕ркоркп ркЫрлЗ!
ЁЯСЙ рк╢рлБркВ рккрлНрк░рлЛрккрк░рлНркЯрлА ркорк╛ркЯрлЗ ркЖркЧрк│ рк╡ркзрк╡рлБркВ ркЫрлЗ? рк░рк┐рккрлНрк▓рк╛ркп ркХрк░рлЛ YES."""
    ]

def visit_scheduled_to_done_msgs(row):
    location = clean_location(get_value(row,'C'))
    return [
        f"""ЁЯМЯ {get_value(row,'B')} | {location}
ЁЯСЙЁЯП╗ {get_value(row,'E')}
тЬи {get_value(row,'I')}
ЁЯСА 360 tour ркерлА ркШрк░ detail ркЬрлЛркИ рк╢ркХрлЛ
ЁЯУН {get_360_or_video(row)}
ЁЯУЮ Visit ркорк╛ркЯрлЗ timing ркЬркгрк╛рк╡рлЛ ркЬрлЗркерлА arrange ркеркИ рк╢ркХрлЗ.""",

        f"""ЁЯМЯ ркдркорк╛рк░рлБркВ dream home рк╣рк╡рлЗ reality ркмркирк╡рк╛ ркдрлИркпрк╛рк░ ркЫрлЗ.
ЁЯПа {get_value(row,'E')}
ЁЯПв {get_value(row,'G')} ркорк╛рк│
ЁЯзн {get_value(row,'H')}
ЁЯЕ┐я╕П {get_value(row,'J')}
ЁЯУЮ Visit suitable time share ркХрк░рлЛ ркЬрлЗркерлА personally ркЬрлЛркИ рк╢ркХрк╛ркп.""",

        f"""ЁЯМЯ ркПркХ ркПрк╡рлБркВ ркШрк░ ркЬрлНркпрк╛ркВ family рк╕рк╛ркерлЗ ркирк╡рлА memory ркмркирлЗ.
тЬи ркЖ ркШрк░ ркдркорк╛рк░рлБркВ lifestyle easy ркмркирк╛рк╡рлА рк╢ркХрлЗ.
ЁЯУЮ Visit plan today share ркХрк░рлЛ ркЬрлЗркерлА personally feel ркорк│рлА рк╢ркХрлЗ.""",

        f"""{get_value(row,'B')} | {location}
ЁЯСЙЁЯП╗ {get_value(row,'E')}
ЁЯМЯ ркЖ property ркорк╛ркЯрлЗ Buyers interest рк╕ркдркд рк╡ркзрлА рк░рк╣рлНркпрлЛ ркЫрлЗ.
ЁЯСЙ ркЖркЬрлЗ visit ркХрк░рлЛ ркЕркирлЗ deal Miss рки ркХрк░рлЛ.
ЁЯУЮ Visit confirm ркХрк░рлЛ.""",

        f"""ЁЯПа Cleardeals = trust + full support
ЁЯУМ 0% brokerage
ЁЯУМ Loan + legal help
ЁЯУМ Visit assist
ЁЯУМ Negotiation support
ЁЯУЮ Visit confirm ркХрк░рк╡рк╛ ркХрлЗ ркмрлАркЬрлБркВ property ркЬрк╛ркгрк╡рк╛ reply ркХрк░рлЛ."""
    ]

def create_txt(messages, property_address, header):
    content = f"ClearDeals Marketing Messages\n"
    content += f"Property: {property_address}\n"
    content += f"Generated: {pd.Timestamp.now()}\n"
    content += "="*50 + "\n\n"
    for idx, msg in enumerate(messages):
        content += f"{header} Day {idx+1}\n"
        content += "-" * 30 + "\n"
        content += msg + "\n\n"
    return content

# --- Streamlit App ---
st.title("ClearDeals Marketing Messages Generator")

uploaded_file = st.file_uploader(
    "Upload Property Data File (.csv, .xlsx, .json)",
    type=["csv", "xlsx", "json"],
    help="Upload your master property file"
)

if uploaded_file:
    if uploaded_file.name.endswith('.csv'):
        df = pd.read_csv(uploaded_file)
    elif uploaded_file.name.endswith('.xlsx'):
        df = pd.read_excel(uploaded_file)
    else:
        df = pd.read_json(uploaded_file)
    df.columns = [col.strip() for col in df.columns]
    # Ensure all mapped columns exist
    for code, col in COLUMN_MAP.items():
        if col not in df.columns:
            df[col] = "NA"
    st.dataframe(df, use_container_width=True)
    # Single property selection
    property_options = [f"{row[COLUMN_MAP['B']]} | {clean_location(row[COLUMN_MAP['C']])}" for _, row in df.iterrows()]
    selected_idx = st.selectbox(
        "Select Property for Preview/Download:",
        range(len(property_options)),
        format_func=lambda x: property_options[x]
    )
    row = df.iloc[selected_idx]
    property_address = get_value(row, "B")
    tag = safe_filename(property_address)
    # Generate messages
    closing_msgs = visit_done_to_closing_msgs(row)
    scheduled_msgs = visit_scheduled_to_done_msgs(row)
    # Preview and download for single property
    st.markdown("### Visit Done to Closing Messages")
    for idx, msg in enumerate(closing_msgs):
        st.markdown(f"**Day {idx+1}:**\n{msg}")
    st.markdown("### Visit Scheduled to Visit Done Messages")
    for idx, msg in enumerate(scheduled_msgs):
        st.markdown(f"**Day {idx+1}:**\n{msg}")
    st.download_button(
        label="тмЗя╕П Download Visit Done to Closing (.txt)",
        data=create_txt(closing_msgs, property_address, "Visit Done to Closing").encode('utf-8'),
        file_name=f"{tag}_VisitDoneToClosing.txt",
        mime="text/plain"
    )
    st.download_button(
        label="тмЗя╕П Download Visit Scheduled to Visit Done (.txt)",
        data=create_txt(scheduled_msgs, property_address, "Visit Scheduled to Visit Done").encode('utf-8'),
        file_name=f"{tag}_VisitScheduledToVisitDone.txt",
        mime="text/plain"
    )
    # Batch download for all properties
    if st.button("ЁЯФД Generate for All Properties (ZIP)", type="secondary"):
        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, "w") as zip_file:
            for idx, row in df.iterrows():
                property_address = get_value(row, "B")
                tag = safe_filename(property_address)
                closing_msgs = visit_done_to_closing_msgs(row)
                scheduled_msgs = visit_scheduled_to_done_msgs(row)
                closing_txt = create_txt(closing_msgs, property_address, "Visit Done to Closing")
                scheduled_txt = create_txt(scheduled_msgs, property_address, "Visit Scheduled to Visit Done")
                zip_file.writestr(f"Visit Done to Closing/{tag}_VisitDoneToClosing.txt", closing_txt)
                zip_file.writestr(f"Visit Scheduled to Visit Done/{tag}_VisitScheduledToVisitDone.txt", scheduled_txt)
        zip_buffer.seek(0)
        st.success("тЬЕ Both sets of messages generated for all properties!")
        st.download_button(
            label="тмЗя╕П Download All Messages (ZIP)",
            data=zip_buffer,
            file_name=f"All_Properties_Messages_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.zip",
            mime="application/zip",
            use_container_width=True
        )
        st.info("Each property has two .txt files in separate folders inside the ZIP.")
